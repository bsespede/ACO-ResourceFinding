package com.baru.survivor.backend.map;

import java.awt.Point;
import java.util.HashMap;
import java.util.Map;

import com.baru.survivor.frontend.Survivors;

public class AutoTile {

	HashMap<Point, Byte> updateTiles = new HashMap<Point, Byte>();
	private byte[][] bitStatus;
	
	public AutoTile() {
		bitStatus = new byte[Survivors.width][Survivors.height];
		for (int i = 0; i < Survivors.width; i++) {
			for (int j = 0; j < Survivors.height; j++) {
				bitStatus[i][j] = 15;
			}
		}
	}
	
	public void addTile(int x, int y){
		bitStatus[x][y] = 0;
		updateNearbyBytes(x, y);
	}
	
	public Map<Point, Byte> getUpdateTiles(){
		return updateTiles;		
	}
	
	public void updateNearbyBytes(int x, int y) {		
		
		//Corners
		if (validPoint(x-1, y-1)){
			bitStatus[x-1][y-1] &= 11;	
			updateTiles.put(new Point(x-1,  y-1), bitStatus[x-1][y-1]);
		}
		if (validPoint(x+1, y-1)){
			bitStatus[x+1][y-1] &= 7;
			updateTiles.put(new Point(x+1,  y-1), bitStatus[x+1][y-1]);
		}
		if (validPoint(x-1, y+1)){
			bitStatus[x-1][y+1] &= 14;
			updateTiles.put(new Point(x-1,  y+1), bitStatus[x-1][y+1]);
		}
		if (validPoint(x+1, y+1)){
			bitStatus[x+1][y+1] &= 13;
			updateTiles.put(new Point(x+1,  y+1), bitStatus[x+1][y+1]);
		}
	}

	private boolean validPoint(int x, int y) {
		return (x >= 0 && x < Survivors.width) && (y >= 0 && y < Survivors.height);
	}

	public byte get(int x, int y) {
		return bitStatus[x][y];
	}
	
}
